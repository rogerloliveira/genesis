@mixin for-phones-only {
  @media (max-width: 599px) {
    @content;
  }
}

@mixin for-tablets-up {
  @media (min-width: 600px) and (max-width: 1199px) {
    @content;
  }
}

@mixin for-desktops-up {
  @media (min-width: 1200px) {
    @content;
  }
}

@mixin background-variants($color-map, $brightness: 0, $hover: 0, $border: 10, $transparency: .6, $includeDisable: false) {
  background-origin: border-box;
  @each $name, $colors in $color-map {
    &.#{$name} {
      $color: nth($colors, 1);
      $background-color: color-brightness($color, $brightness);
      $background-color: transparentize($background-color, $transparency);
      background: $background-color;

      color: nth($colors, 2);
      @if $border != 0 {
        $border-color: color-brightness($color, $border);
        $border-color: transparentize($border-color, $transparency);
        border: $border-color 1px solid;
      }
      @if $hover != 0 {
        &:hover {
          $hover-color: color-brightness($color, $hover);
          $hover-color: transparentize($hover-color, $transparency);
          background: $hover-color;
        }
      }
      @if $includeDisable {
        &:disabled {
          opacity: .4;
        }
      }
    }
  }
}

@mixin color-variants($color-map, $brightness: 0, $hover: 0) {
  @each $name, $colors in $color-map {
    &.text-#{$name} {
      $color: nth($colors, 1);
      color: color-brightness($color, $brightness) !important;
      @if $hover != 0 {
        &:hover {
          color: color-brightness($color, $hover) !important;
        }
      }
    }
  }
}

@mixin outline-variants($color-map, $hover: 0, $border: -10) {
  background: transparent;
  @each $name, $colors in $color-map {
    &.outline-#{$name} {
      $color: nth($colors, 1);
      color: $color;
      border: color-brightness($color, $border) 1px solid;
      @if $hover != 0 {
        &:hover {
          background: color-brightness($color, $hover);
          color: nth($colors, 2);
        }
      }
    }
  }
}

@mixin color-property-variants($property, $color-map, $brightness: 0) {
  @each $name, $colors in $color-map {
    &.#{$name} {
      $color: nth($colors, 1);
      #{$property}: color-brightness($color, $brightness);
    }
  }
}

@mixin scrollbar($scrollbar-bg-color, $scrollbar-fg-color) {
  scrollbar-color: $scrollbar-bg-color $scrollbar-fg-color;
  scrollbar-width: thin;

  &::-webkit-scrollbar {
    background-color: $scrollbar-fg-color;
  }
  &::-webkit-scrollbar-thumb {
    background-color: $scrollbar-bg-color;
  }
  &::-webkit-scrollbar {
    width: .5rem;
    height: .5rem;
  }
}

@mixin grid-areas($areas, $class: false) {
  @each $area in $areas {
    @if $class {
      .#{$area} {
        grid-area: $area;
        @if $debug {
          border: 1px solid red;
          background: rgba(255, 0, 0, 0.1);
        }
      }
    } @else {
      ##{$area} {
        grid-area: $area;
        @if $debug {
          border: 1px solid red;
          background: rgba(255, 0, 0, 0.1);
        }
      }
    }
  }
}

@mixin sizes($class, $property, $breakpoint, $measurement) {
  $i: 5;
  @while $i <= 100 {
    .#{$class}#{$breakpoint}-#{$i} {
      #{$property}: $i * $measurement;
    }
    $i: $i + 5;
  }
}

$sides: ("" "", b "-bottom", t "-top", r "-right", l "-left");
@mixin side-variants($property, $alias, $breakpoint, $factor, $extra: "") {
  @for $i from 1 through 16 {
    @each $suffix, $modifier in $sides {
      .#{$alias}#{$suffix}#{$breakpoint}-#{$i} {
        #{$property}#{$modifier}: $i * $factor #{$extra} !important;
      }
    }
    .#{$alias}h#{$breakpoint}-#{$i} {
      #{$property}-left: $i * $factor #{$extra} !important;
      #{$property}-right: $i * $factor #{$extra} !important;
    }
    .#{$alias}v#{$breakpoint}-#{$i} {
      #{$property}-top: $i * $factor #{$extra} !important;
      #{$property}-bottom: $i * $factor #{$extra} !important;
    }
  }
}

@mixin property-variants($property, $alias, $variants) {
  @each $suffix, $value in $variants {
    .#{$alias}-#{$suffix} {
      #{$property}: $value !important;
    }
  }
}

@mixin font-sizes($breakpoint) {
  @for $i from 1 through 3 {
    .small#{$breakpoint}-#{$i} {
      font-size: 1rem - ($i * .25rem);
    }
  }

  @for $i from 1 through 12 {
    .large#{$breakpoint}-#{$i} {
      font-size: 1rem + ($i * .25rem);
    }
  }
}

@mixin button($colors-map, $hover: -10, $border: -20) {
  @include background-variants($colors-map, 0, $hover, $border);
  @include outline-variants($colors-map, 1, $border);
}

@mixin genesis-gradient($background-color, $color, $gradient-breakpoint: 10px, $brightness: 0) {
  $background-color: color-brightness($background-color, $brightness);
  background: linear-gradient(0, lighten($background-color, 20), $background-color $gradient-breakpoint, lighten($background-color, 20));
  border-bottom: 1px solid $background-color;
  color: $color;
}